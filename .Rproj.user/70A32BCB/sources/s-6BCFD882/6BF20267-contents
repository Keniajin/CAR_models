#### others
####defining the inits
inits <- function(){
  list(tau = 1, precB1 = 1,
       cVal=c(rep(0, times=40, each = 1)),
       b1=1 , b2=1,b3=1,b4=1 , alpha0=1)
}


####defining the parameters to monitor
###param convolution
parameters <- c("b[]","precB1","cVal" , "RR2[]" , "RR[]", "tau" , "alpha0")

####use of bugs function for simulation
###codaPkg=F to brinng results to R
sink(paste0(file.path(getwd(),"/analysis/code/unstru/poisson_model_2.txt")))
model2 <-  R2OpenBUGS::bugs(data = dataModel,inits = inits, model.file="unstructured.txt",
                            parameters.to.save = parameters,
                            n.chains=1,n.iter=30000,n.burnin=1000,n.thin=10,codaPkg=F,digits = 4,  debug = F,
                            #program = "openbugs" bugs.directory="E:/softwares/WinBUGS14" ,,
                            working.directory = file.path(getwd(),"/analysis/code/unstru"))
print(model2)
sink()
print(model2)
plot(model2)
mcmcplots::mcmcplot(model2, dir=file.path(getwd(),"/complete") , regex = "RR")


####defining the initials
# Poisson Inits
psi_s <- rep(0, times=10, each = 1)

psi_s <- c(NA,psi_s)
inits_Vals <-  function(){
  list(alpha = c(0,0,0,0,0,0,0), 
       Psi=structure(.Data =c(NA , 0  ,0 , 0 , 0 , 0,  0 , 0,  0 , 0 ,0), .Dim=c( 1, 11 )))
}






####defining the parameters to monitor
###param convolution
params <- c("alpha[]" , "Psi[1,]", "Phi[]" ,"r")

####use of bugs function for simulation
###codaPkg=F to brinng results to R
sink(paste0(file.path(getwd(),"/analysis/code/sp_mod/poisson_s.txt")))
model3 <-  R2OpenBUGS::bugs(data = dataModel, model.file="ken_negative_binomial.txt",inits=inits_Vals,
                            parameters.to.save = params,
                            n.chains=1,n.iter=20000,n.burnin=1000,n.thin=10,codaPkg=F,digits = 4,  debug = F,
                            #program = "openbugs" bugs.directory="E:/softwares/WinBUGS14" ,,
                            working.directory = file.path(getwd(),"/analysis/code/sp_mod"))
print(model3)
sink()
plot(model3)
mcmcplots::mcmcplot(model3, dir=file.path(getwd(),"/analysis/code/sp_mod/figures") , regex = "alpha")

print(model3)
saveList <- list(model3, dataModel, adj,num, params, sumNumNeigh, admData2)
save.image(file="analysis/code/sp_mod/bugsModel.RData") 

### MOdel with AR1
params_AR <- c("alpha[]" , "Psi[]", "Phi[]" ,"r", "sigma.b[]")
inits_Vals_AR <-  function(){
  list(alpha = c(0,0,0,0,0,0,0), Psi=c(0 , 0  ,0 , 0 , 0 , 0,  0 , 0,  0 , 0 ,0))
}


sink(paste0(file.path(getwd(),"/analysis/code/spmod_AR/poisson_s_AR1.txt")))
model4 <-  R2OpenBUGS::bugs(data = dataModel, model.file="ken_negative_binomial_AR.txt",inits=inits_Vals_AR,
                            parameters.to.save = params_AR,
                            n.chains=1,n.iter=20000,n.burnin=1000,n.thin=10,codaPkg=F,digits = 4,  debug = F,
                            #program = "openbugs" bugs.directory="E:/softwares/WinBUGS14" ,,
                            working.directory = file.path(getwd(),"/analysis/code/spmod_AR"))
print(model4)
sink()
plot(model4)
mcmcplots::mcmcplot(model4, dir=file.path(getwd(),"/analysis/code/sp_mod/figures") , regex = "alpha")

print(model4)

###using r2jags
model_unstruct<-"
model{
# Poisson likelihood for observed counts
for (i in 1:N) {
cumulitive_count[i] ~ dpois(mu[i])
log(mu[i]) <-  alpha0 + log(cumulitive_time[i])+ b[1]*EVI_VALUE[i] + b[2]*nagem[i] + 
b[3]*nsex[i] + b[4]*severe_disease[i] +   cVal[sublocation[i]]
}#close for loop

## CAR prior distribution for sub location random effects 
cVal[1:40] ~ car.normal(adj[], weights[], num[], tau)
for(k in 1:sumNumNeigh) {
weights[k] <- 1
}# close for loop structured

### Prior distributions for for the betas
for(x in 1:4) {
b[x] ~dnorm(0,precB1)
}
alpha0 ~dnorm(0,precB1)
### exponentiate the betas for the RR
for (i in 1:4) {
RR2[i] <- exp(b[i])
}
precB1~dgamma(0.5, 0.0005)
tau  ~ dgamma(0.5, 0.0005)     # prior on precision
#tauv ~ dgamma(0.5, 0.0005)  #prior structured
}#close model
"
model_unstruct<-textConnection(model_unstruct)

#run with jags.samples
unstruct_jags <- rjags::jags.model(file=model_unstruct,
                                   data=dataModel,
                                   inits=inits,
                                   n.chains=1,
                                   n.adapt = 1000)

