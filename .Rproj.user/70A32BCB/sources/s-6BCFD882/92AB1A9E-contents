### R code for Chapter 4
### Last update: 14/08/2014

###################################################
### Set working directory and load packages
###################################################
remove(list=ls())
my.dir <- paste(getwd(),"/",sep="")

require(INLA)
require(maptools)
require(lattice)

###################################################
### Code for Section 5.1.2
###################################################
# You neeed a folder called "NMMAPS" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

dataNMMAPS <- read.csv(paste(my.dir,"NMMAPS/NMMAPSraw.csv",sep=""))

formula <-  pm10 ~ 1 + temperature
model.linear <- inla(formula,family="gaussian",data=dataNMMAPS)
round(model.linear$summary.fixed[,1:5],3)

# *** Code for Figure 5.2
plot(model.linear$marginals.fixed[[1]],type="l",main="",ylab="",xlab=expression(beta[0]))
plot(model.linear$marginals.fixed[[2]],type="l",main="",ylab="",xlab=expression(beta[1]))
# ***

summary(lm(formula,data=dataNMMAPS))

# Change the prior for beta0 and beta1
model.linear <- inla(formula,family="gaussian", data=dataNMMAPS,
                control.fixed=list(mean=0, prec=1, mean.intercept=0, prec.intercept=0.0001))

# Change the prior for the precision
model.linear <- inla(formula,family="gaussian", data=dataNMMAPS,
                 control.family=list(hyper=list(prec=list(prior="gaussian",param=c(0,1)))))

# How to set the prior on the standard deviation 
# Set parameters for sigma 
a1 <- 2
b1 <- 14
# Simulate sigma from a Uniform distribution
sigma <- runif(n=10000,min=a1,max=b1)
# Check the mean and variance of sigma 
mean(sigma); var(sigma)
# Obtain the precision 
tau <- 1/sigma^2
# Calculate the values of a and b for the distribution of the precision
a2 <- mean(tau)^2/var(tau)
b2 <- a2/mean(tau)

# *** Code for Figure 5.3
plot(density(tau),main="")
curve(dgamma(x,a2,rate=b2), from=0, to=max(tau), add=T, lty=2,lwd=2)
legend("topright",legend=c(expression(tau),expression(paste("Gamma(",a[2],",",b[2],")",sep=""))),
       lwd=c(1,2),lty=c(1,2),bty="n", pt.cex=2)
# ***


###################################################
### Code for Section 5.2
###################################################
model.linear <- inla(formula,family="gaussian",
                     data=dataNMMAPS,
                     control.predictor=list(compute=TRUE))

res.lin <- (dataNMMAPS$pm10 - model.linear$summary.fitted.values$mean) / model.linear$summary.fitted.values$sd
round(model.linear$summary.fitted.values[1:5,1:5],3) 

# *** Code for Figure 5.4 top
plot(res.lin,ylim=c(-150,300),main="",xlab="Days",
     ylab=expression((y[i] - hat(mu[i]))/hat(sigma[i])),xaxt="n")
# ***

# Iclude month effect in the model
month <- substring(as.character(dataNMMAPS$date), first=4, last=6)
dataNMMAPS$month <- factor(month,
                    levels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
formula.inla2 <- pm10 ~ 1 + temperature + month
model.linear2 <- inla(formula.inla2,family="gaussian",
                      data=dataNMMAPS,
                      control.predictor = list(compute = TRUE))

round(model.linear2$summary.fixed[,1:5],3)
res.lin2 <- (dataNMMAPS$pm10 - model.linear2$summary.fitted.values$mean) / model.linear2$summary.fitted.values$sd

# *** Code for Figure 5.4 centre
plot(res.lin2,ylim=c(-50,150),main="",xlab="Days",
     ylab=expression((y[i] - hat(mu[i]))/hat(sigma[i])),xaxt="n")
# ***

# Inlcude RW in the model
formula.inla3 <- pm10 ~  1 +  temperature + month + 
                 f(id, model="rw1", hyper = list(prec = list(prior="loggamma",param=c(1,0.01))))
model.linear3 <- inla(formula.inla3,family="gaussian",
                      data=dataNMMAPS,
                      control.predictor = list(compute = TRUE))

round(model.linear3$summary.fixed[,1:5],3)
res.lin3 <- (dataNMMAPS$pm10 - model.linear3$summary.fitted.values$mean) / model.linear3$summary.fitted.values$sd

# *** Code for Figure 5.4 bottom
plot(res.lin3,ylim=c(-25,25),main="",xlab="Days",
     ylab=expression((y[i] - hat(mu[i]))/hat(sigma[i])),xaxt="n")
# ***

# *** Code for Figure 5.5
plot(model.linear3$summary.random$id$mean,xaxt="n",
     xlab="Days",ylab=expression(PM[10]),pch=10,cex=0.4,ylim=c(min(model.linear3$summary.random$id$"0.025quant"),max(model.linear3$summary.random$id$"0.975quant")))
# ***

###################################################
### Code for Section 5.2.1
###################################################
# You neeed a folder called "Swedish Income" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

data.income <- read.csv(paste(my.dir,"Swedish Income/income.csv",sep=""))
data.income$age.centered <- scale(data.income$age, scale=FALSE)
data.income$income.scaled <- scale(data.income$income, scale=TRUE)

formula.inla <- income.scaled ~ 1 + age.centered
model.linear <- inla(formula.inla,family="gaussian",
                      data=data.income,
                      control.predictor=list(compute=TRUE))

# *** Code for Figure 5.6 top
plot(data.income$age.centered,data.income$income.scaled, cex.lab=2,cex.axis=2,xlab="Age",ylab="Income",xlim=c(-10,20))
lines(data.income$age.centered[order(data.income$age.centered)],model.linear$summary.fitted.values[order(data.income$age.centered),1])
lines(data.income$age.centered[order(data.income$age.centered)],model.linear$summary.fitted.values[order(data.income$age.centered),3],col="black",lty=2)
lines(data.income$age.centered[order(data.income$age.centered)],model.linear$summary.fitted.values[order(data.income$age.centered),5],col="black",lty=2)
# ***

#Model with T likelihood
model.linearT <- inla(formula.inla, family="T", 
                      data=data.income,
                      control.family=list(hyper=list(dof=list(initial=0.693,fixed=TRUE))),
                      control.predictor=list(compute=TRUE))

# *** Code for Figure 5.6 bottom
plot(data.income$age.centered,data.income$income.scaled, cex.lab=2,cex.axis=2,xlab="Age",ylab="Income",xlim=c(-10,20))
lines(data.income$age.centered[order(data.income$age.centered)],model.linearT$summary.fitted.values[order(data.income$age.centered),1])
lines(data.income$age.centered[order(data.income$age.centered)],model.linearT$summary.fitted.values[order(data.income$age.centered),3],col="black",lty=2)
lines(data.income$age.centered[order(data.income$age.centered)],model.linearT$summary.fitted.values[order(data.income$age.centered),5],col="black",lty=2)
# ***

###################################################
### Code for Section 5.3 (Studying stroke mortality in Sheffield) 
###################################################
# You neeed a folder called "Stroke Sheffield" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

Stroke <- read.csv(paste(my.dir,"Stroke Sheffield/Stroke.csv",sep=""))
Stroke$Adjusted.prob <- Stroke$stroke_exp/Stroke$pop
Stroke$logit.adjusted.prob <- log(Stroke$Adjusted.prob/(1-Stroke$Adjusted.prob))                            

formula.inla <- y ~ 1 + factor(NOx) + factor(Townsend) +
                        offset(logit.adjusted.prob)
model.logistic <- inla(formula.inla, family="binomial", Ntrials=pop, data=Stroke)

round(model.logistic$summary.fixed[,1:5],3)

prob.stroke <- inla.tmarginal(function(x) exp(x)/(1+exp(x)), model.logistic$marginals.fixed[[1]])
inla.zmarginal(prob.stroke)

inla.emarginal(exp, model.logistic$marginals.fixed$"factor(NOx)2")

###################################################
### Code for Section 5.3 (Incidents in ships) 
###################################################
# You neeed a folder called "Ship Incidents" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

ShipsIncidents <- read.csv(paste(my.dir,"Ship Incidents/Ships.csv",sep=""))

formula.inla <- y ~ 1 + built + oper + type
model.poisson <- inla(formula.inla,family="poisson", data=ShipsIncidents, offset=log(months))

round(model.poisson$summary.fixed[,1:5],3)

###################################################
### Code for Section 5.4.3
###################################################
m <- 10000
set.seed(123)
x <- rnorm(m)
group <- sample(seq(1,100), size=m, replace=T)

# Simulate Random effect (recall that beta_0 = b_0 + v_j)
tau.v0 <- 0.25
set.seed(4455)
v <- rnorm(length(unique(group)), 0, sqrt(1/tau.v0))

# Assign the group random effect to each individual
vj <- v[group]

# Simulate y 
tau <- 3
set.seed(334455)
b0 <- 5
beta1 <- 2
y <- rnorm(m, b0 + vj + beta1*x, 1/sqrt(tau))

formula <- y ~ 1 + x + f(group, model="iid")
output <- inla(formula, family="gaussian", data=data.frame(y,x,group))   

# Set a prior for the precision 
a1 <- 1.5
b1 <- 2.5
# Start with the standard deviation
sigma.v0 <- runif(n=10000,min=a1,max=b1)
# and the the precision
tau.v <- 1/sigma.v0^2
mean(tau.v)

a2 <- mean(tau.v)^2/var(tau.v)
b2 <- a2/mean(tau.v)
a2
b2

formula <- y ~ 1 + x + f(group,model="iid",hyper=list(prec=list(prior="loggamma",param=c(a2,b2))))
output <- inla(formula, family="gaussian", data=data.frame(y,x,group))   

round(output$summary.fixed[,1:5],2)
round(output$summary.hyperpar[,1:5],2)


###################################################
### Code for Section 5.4.4
###################################################
# You neeed a folder called "CD4" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

CD4 <- read.csv(paste(my.dir,"CD4/CD4.csv",sep=""))
CD4 <- data.frame(id=rep(seq(1,80),times=4),y=append(CD4[,1],append(CD4[,2],append(CD4[,3], CD4[,4]))),drug=rep(CD4[,5],4),AIDS=rep(CD4[,6],4), Time=rep(seq(1,4),each=80))

# Mod1: Pooled model
formula.pooled <- y ~ 1 + drug + AIDS + Time
CD4.1 <- inla(formula.pooled,family="gaussian", data=CD4,
                control.predictor=list(compute=TRUE),
                control.fixed=list(mean=list(0), prec=list(0.0001), mean.intercept=0, prec.intercept=0.0001))
CD4.1.summary <- CD4.1$summary.fixed

# Mod2: Independent model
formula.indep <- y ~ 1 + factor(id) + drug + AIDS + Time
CD4.2 <- inla(formula.indep,family="gaussian", data=CD4,
                control.predictor=list(compute=TRUE),
                control.fixed=list(mean=0,prec=0.0001, mean.intercept=0, prec.intercept=0.0001))
CD4.2.summary <- CD4.2$summary.fixed
 
# Mod3: Hierarchical model
formula.hier <- y ~ 1 + drug + AIDS + Time +
                    f(id,model="iid", hyper=list(prec=list(prior="loggamma",param=c(1,0.0001))))
CD4.3 <- inla(formula.hier,family="gaussian", data=CD4,
               	control.predictor=list(compute=TRUE),
                control.fixed=list(mean=0,prec=0.0001, mean.intercept=0, prec.intercept=0.0001))

# *** Code for Figure 5.13 top
b0 <- inla.rmarginal(1000,marg = CD4.3$marginals.fixed$`(Intercept)`)

v0 <- matrix(NA,1000,80)
for(i in 1:80){
  v0[,i] <- inla.rmarginal(1000,marg = CD4.3$marginals.random$id[[i]])
}  
beta0 <- b0 + v0

#Compute quartiles for beta0
beta0_quartiles <- t(apply(beta0, MARGIN=2,
                function(x) quantile( x, probs= c(0.025,0.5,0.975))))
dim(beta0_quartiles)

#Include free spaces between each line
free.spaces <- 10
#Plot the 95% credibility interval for model 2
plot(rep(beta0_quartiles[,1],free.spaces),seq(1,80*free.spaces),xlab=expression(beta[paste(0,"j")]),type="n",
     ylab="Patients",main="",pch="l",yaxt="n", lwd=0.2,xlim=c(min(CD4.2.summary),max(CD4.2.summary)))

id.seq <- seq(1, 80*free.spaces, by=free.spaces)
#id=1
lines(CD4.2.summary[1,c(3,5)],rep(id.seq[1],2),lty=3,lwd=1.7)
points(CD4.2.summary[1,4],id.seq[1],cex=1.5, pch=20)

for(i in 2:80){
  lines(CD4.2.summary[1,c(3,5)]+CD4.2.summary[i,c(3,5)],rep(id.seq[i],2),lty=3,lwd=1.7)
  points(CD4.2.summary[1,4]+CD4.2.summary[i,4],id.seq[i],cex=1.5, pch=20)
}
# Estimate from Mod1
abline(v=CD4.1.summary[1,4],lwd=2)
# ***

# *** Code for Figure 5.13 bottom
plot(rep(beta0_quartiles[,1],free.spaces),seq(1,80*free.spaces),xlab=expression(beta[paste(0,"j")]),type="n",ylab="Patients",main="",pch="l",yaxt="n", lwd=0.2,xlim=c(min(beta0_quartiles),max(beta0_quartiles)))
id.seq <- seq(1, 80*free.spaces, by=free.spaces)
for(i in 1:80){
  lines(beta0_quartiles[i,c(1,3)],rep(id.seq[i],2),lty=1,lwd=1.7)
  points(beta0_quartiles[i,2],id.seq[i],cex=1.5, pch=20)
}
# Estimate from Mod1
abline(v=CD4.1.summary[1,4],lwd=2)


###################################################
### Code for Sectin 5.4.5
###################################################
# You neeed a folder called "Lip cancer in Scotland" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

load(paste(my.dir,"Lip cancer in Scotland/LipCancer.RData",sep=""))
LipCancerData <- data.frame(id=seq(1,56),O=LipCancer$O,E=LipCancer$E,X=LipCancer$X)

formula.inla <- O ~ 1 + X + 
                f(id,model="iid", hyper=list(prec=list(prior="loggamma",param=c(1,0.00001))))

lipcancer.poisson <- inla(formula.inla,family="poisson",
                           data=LipCancerData, offset=log(E),
                           control.predictor=list(compute=TRUE),
                           control.fixed=list(mean=0,prec=0.00001, mean.intercept=0,prec.intercept=0.00001))

round(lipcancer.poisson$summary.fixed,3)
round(lipcancer.poisson$summary.hyperpar,3)

# *** Code for Figure 5.14 
library(maptools)

geobugs.map <- readSplus(paste(my.dir,"Lip cancer in Scotland/LipCancer.map",sep=""))

post.mean.exp.v0 <- lapply(lipcancer.poisson$marginals.random$id, function(x) inla.emarginal(exp,x))
data.exp.v0 <- data.frame(ID=names(geobugs.map), post.mean=unlist(post.mean.exp.v0))
row.names(data.exp.v0) <- names(geobugs.map)
wards <- SpatialPolygonsDataFrame(geobugs.map,data.exp.v0)

trellis.par.set(axis.line=list(col=NA))
spplot(obj=wards, zcol="post.mean",main="", col.regions=gray(99:0/99))
# ***

# Compute the posterior distribution of beta0i
lcs <- inla.make.lincombs(id = diag(56),"(Intercept)" = rep(1,56))

lipcancer.poisson.int <- inla(formula.inla,family="poisson",
                              data=LipCancerData, offset=log(E),
                              control.predictor=list(compute=TRUE),
                              lincomb=lcs,
                              control.fixed=list(mean=0,prec=0.0001))
lipcancer.poisson.int$summary.lincomb.derived

# Include in the model a random slope 
LipCancerData$id2 <- LipCancerData$id
formula.inla2 <- O ~ 1 + X +  
        f(id, model="iid", hyper = list(prec = list(prior="loggamma",param=c(1,0.00001)))) +
        f(id2, X, model="iid", hyper = list(prec = list(prior="loggamma",param=c(1,0.00001))))

#Define lincombs for beta0
lcs1 <- inla.make.lincombs(id = diag(56),"(Intercept)" = rep(1,56))
#Define lincombs for beta1
lcs2 <- inla.make.lincombs(id = diag(56), X = rep(1,56))
names(lcs2) <- paste(names(lcs1),"X",sep="")
all.lcs <- c(lcs1,lcs2)

lipcancer.poisson.all.lcs <- inla(formula.inla2,family="poisson",
                              data=LipCancerData, offset=log(E),
                              lincomb=all.lcs,
                              control.fixed=list(mean=0,prec=0.0001))

# *** Code for Figure 5.15 left
post.mean.exp.beta0 <- lapply(lipcancer.poisson.all.lcs$marginals.lincomb.derived[1:56], function(x) inla.emarginal(exp,x))
lcs.cutoff <- quantile(unlist(post.mean.exp.beta0))
cat.lcs <- cut(unlist(post.mean.exp.beta0),breaks=lcs.cutoff,include.lowest=TRUE)

data.lcs.beta0 <- data.frame(ID=names(geobugs.map), post.mean.beta0=cat.lcs)
row.names(data.lcs.beta0) <- names(geobugs.map)
wards <- SpatialPolygonsDataFrame(geobugs.map,data.lcs.beta0)

trellis.par.set(axis.line=list(col=NA))
spplot(obj=wards, zcol="post.mean.beta0",main="", col.regions=gray(seq(0.9,0.1,length=4)))
# ***

# *** Code for Figure 5.15 right
post.mean.exp.beta1 <- lapply(lipcancer.poisson.all.lcs$marginals.lincomb.derived[57:(56*2)], function(x) inla.emarginal(exp,x))
lcs.cutoff <- quantile(unlist(post.mean.exp.beta1))
cat.lcs <- cut(unlist(post.mean.exp.beta1),breaks=lcs.cutoff,include.lowest=TRUE)

data.lcs.beta1 <- data.frame(ID=names(geobugs.map), post.mean.beta1=cat.lcs)
row.names(data.lcs.beta1) <- names(geobugs.map)
wards <- SpatialPolygonsDataFrame(geobugs.map,data.lcs.beta1)

trellis.par.set(axis.line=list(col=NA))
spplot(obj=wards, zcol="post.mean.beta1",main="", col.regions=gray(seq(0.9,0.1,length=4)))
# ***

###################################################
### Code for Section 5.4.6
###################################################
# You neeed a folder called "Stroke Sheffield" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

Stroke <- read.csv(paste(my.dir,"Stroke Sheffield/Stroke.csv",sep=""))
Stroke$Adjusted.prob <- Stroke$stroke_exp/Stroke$pop
Stroke$logit.adjusted.prob <- log(Stroke$Adjusted.prob/(1-Stroke$Adjusted.prob))

formula.inla.hier1 <- y ~ 1 + factor(NOx) + factor(Townsend) + 
                    offset(logit.adjusted.prob) + f(wbID,model="iid")
model.logistic.hier1 <- inla(formula.inla.hier1,family="binomial",
                             Ntrials=Stroke$pop, data=Stroke)

round(model.logistic.hier1$summary.fixed[,1:5], 3)

# Import the shapefile 
library(maptools)
sheffield.gen <- readShapePoly(paste(my.dir,"Stroke Sheffield/Sheffield.shp",sep=""))

# *** Code for Figure 5.16
#Random intercept beta0
b0 <- inla.rmarginal(1000,model.logistic.hier1$marginals.fixed$`(Intercept)`)
v0 <- matrix(NA,1000,nrow(Stroke))
for(i in 1:nrow(Stroke)){
  v0[,i] <- inla.rmarginal(1000,model.logistic.hier1$marginals.random$wbID[[i]])
}  
beta0 <- b0 + v0

Stroke.prob.mean <- apply(beta0, 2, function(x) mean(exp(x)/(1+exp(x))))
prob.cutoff <- seq(0,1,0.2)
prob.factor <- cut(Stroke.prob.mean, breaks=prob.cutoff,include.lowest=TRUE, 
                   labels=c("[0, 0.2]","(0.2, 0.4]","(0.4,0.6]","(0.6,0.8]", "(0.8,1]"))

RANEF.intercept <- data.frame(wbID=model.logistic.hier1$summary.random[[1]][,1], mean.prob=prob.factor)

ED <- sheffield.gen
data.ED <- attr(ED, "data")
attr(ED, "data") <- merge(data.ED, RANEF.intercept, by="wbID")
color.map=gray(seq(0.9,0.1,length=5))

trellis.par.set(axis.line=list(col=NA))
spplot(obj=ED, zcol="mean.prob", col.regions=color.map,main="")
# ***

###################################################
### Code for Section 5.5 (run the code for Section 5.4.6 first)
###################################################
Stroke1 <- Stroke
Stroke1$y[which(Stroke$Townsend==1 & Stroke$NOx==1)] <- NA

link <- rep(NA, length(Stroke1$y))
link[which(is.na(Stroke1$y))] <- 1

formula.inla.hier1 <- y ~ 1 + factor(NOx) + factor(Townsend) + 
                      f(wbID, model="iid") +  offset(logit.adjusted.prob)
model.logistic.hier.pred <- inla(formula.inla.hier1, data=Stroke1,
                                 family="binomial", Ntrials=Stroke1$pop,
                                 control.predictor=list(link=link))

model.logistic.hier.pred$summary.fitted.values

predicted.values.mean <- c()
for(i in 1:nrow(Stroke1)){
  predicted.values.mean[i] <- inla.emarginal(function(x) x*Stroke1$pop[i], model.logistic.hier.pred$marginals.fitted.values[[i]])
}

# *** Code for Figure 5.18
plot(seq(1,length(Stroke1$y)),Stroke1$y,type="n", ylab="Number of deaths for Stroke",xlab="ED in Sheffield")
points(which(!is.na(Stroke1$y)),Stroke1$y[!is.na(Stroke1$y)],pch=20,col="grey")
points(which(is.na(Stroke1$y)),predicted.values.mean[is.na(Stroke1$y)],pch=4,cex=2)
# ***

###################################################
### Code for Section 5.6.1 (Cross validation)
###################################################
# You neeed a folder called "CD4" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

CD4 <- read.csv(paste(my.dir,"CD4/CD4.csv",sep=""))
CD4 <- data.frame(id=rep(seq(1,80),times=4),y=append(CD4[,1],append(CD4[,2],append(CD4[,3], CD4[,4]))),drug=rep(CD4[,5],4),AIDS=rep(CD4[,6],4), Time=rep(seq(1,4),each=80))

formula.hier <- y ~ 1 + drug + AIDS + 
      f(id,model="iid",hyper=list(prec=list(prior="loggamma",param=c(1,0.0001))))

CD4.3 <- inla(formula.hier,family="gaussian",data=CD4,
               control.predictor=list(compute=TRUE),
               control.fixed=list(mean=list(0),prec=list(0.0001), mean.intercept=0,prec.intercept=0.0001),
               control.compute=list(cpo=TRUE))

sum(CD4.3$cpo$failure)

# *** Code for Figure 5.19
hist(CD4.3$cpo$pit,breaks=8,main="",xlab="PIT")
# ***

sum(log(CD4.3$cpo$cpo))


###################################################
### Code for Section 5.6.1 (Posterior predictive check)
###################################################
# You neeed a folder called "Lip cancer in Scotland" inside your working directory (my.dir)
# with the data downloaded from
# https://sites.google.com/a/r-inla.org/stbook/datasets

load(paste(my.dir,"Lip cancer in Scotland/LipCancer.RData",sep=""))
LipCancerData <- data.frame(id=seq(1,56),O=LipCancer$O,E=LipCancer$E,X=LipCancer$X)

formula.inla <- O ~ 1 + X + f(id,model="iid", hyper=list(prec=list(prior="loggamma",param=c(1,0.0001))))
lipcancer.poisson <- inla(formula.inla,family="poisson",
                            data=LipCancerData, offset=log(E),                      
                            control.predictor=list(link=1, compute=TRUE),
                            control.fixed=list(mean=0,prec=0.00001))

predicted.p.value <- c()
n <- length(LipCancerData[,1])
for(i in (1:n)) {
  predicted.p.value[i] <- inla.pmarginal(q=LipCancerData$O[i], marginal=lipcancer.poisson$marginals.fitted.values[[i]])
}

# *** Code for Figure 5.20
plot(LipCancerData$O,lipcancer.poisson$summary.fitted.values$mean,
     xlab="Observed Values",ylab="Mean post. pred. distribution")
hist(predicted.p.value,main="",xlab="Posterior predictive p-value")
# ***

###################################################
### Code for Section 5.6.1 (Deviance Information Criterion). 
### First Run code for Section 5.6.1 (Cross validation)
###################################################
CD4.1 <- inla(formula.pooled,family="gaussian",data=CD4,
                control.predictor=list(compute=TRUE),
                control.fixed=list(mean=list(0), prec=list(0.0001),mean.intercept=0,prec.intercept=0.0001),
                control.compute=list(dic=TRUE))

CD4.3 <- inla(formula.hier,family="gaussian",data=CD4,
                 control.predictor=list(compute=TRUE),
                 control.fixed=list(mean=0,prec=0.0001),
                 control.compute=list(dic=TRUE))

CD4.1$dic$dic
CD4.3$dic$dic

#Mean Deviance
CD4.1.deviance <- CD4.1$dic$mean.deviance
CD4.1.deviance
CD4.3.deviance <- CD4.3$dic$mean.deviance
CD4.3.deviance
#pD
CD4.1.pD <- CD4.1$dic$p.eff
CD4.1.pD
CD4.3.pD <- CD4.3$dic$p.eff
CD4.3.pD

CD4.1.deviance + CD4.1.pD
CD4.3.deviance + CD4.3.pD


