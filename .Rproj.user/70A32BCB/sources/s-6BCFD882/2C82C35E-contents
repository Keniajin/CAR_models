## Functions for use in the proteomics workflow app

#' This is Function to orient the proteomics data to the preferred shape
#'This function checks whether the data read in needs to be transposed or not
#' @param x data
#' @return data a dataset vector giving number of characters in each element of the
#'   character vector.  Missing strings have missing length.
#' @export
#' @examples
#' 

 
data_orientation  <- function(x){
  #check if the string "Group" is a rowname or a column name or missing
  if(grepl("Group", row.names(x)[1],ignore.case = TRUE)){
    dat <- t(x) 
  }else if(grepl("Group", col.names(x)[1],ignore.case = TRUE)){
    dat <- x
  }else{
    # To insert function that yields warning that group is not defined
  }
  dat
}



##Below is a function to get GENE SETS involved IN KEGG PATHWAYS
# x one KEGG pathway 
getKeggGenes <- function(x){
  gList <- keggGet(x)[[1]]$GENE #keggGET is a function from the KEGGREST package
  if(length(gList)>0){
    genes <- gList[seq(from=1, to=length(gList), by=2)]
  }
  else{
    genes <- "NO KNOWN GENES YET FOR THIS PATHWAY"
  }
  return(genes)
}

#*******************
# USEFUL FUNCTIONS 
#*******************
# NOTE: These functions are very rudimentary. They need refining before publishing

#----------------
# 1. function to orientate data appropriately

#' This is Function to orient the proteomics data to the preferred shape
#'This function checks whether the data read in needs to be transposed or not
#' @param x data
#' @return data a dataset vector giving number of characters in each element of the
#'   character vector.  Missing strings have missing length.
#' @export
#' @examples
#' 
data_orientation  <- function(x){
  #check if the string "Group" is a rowname. If so, transpose
  if(grepl("^GROUP", rownames(x)[1],ignore.case = TRUE, perl = T)){
    # TO ADD CODE HERE TO PROCESS INAPPROPRIATE DATA
  }else if(grepl("^GROUP", colnames(x)[1],ignore.case = TRUE, perl = T)){
    dat <- x
  }else{# take care of the other posibilities e.g pooled samples. In any case, do nothing
    dat <- as.data.frame.matrix(t(x))  
  }
}
#----------------

#----------------
# 2. Function to generate the correlation matrix
#x data set removed anootations
run_correlation <- function(x){
  corMatrix <- round(cor(as.data.frame.matrix(x+1),use="pairwise.complete.obs"),2)
}
#----------------

#----------------
# 3. Function to perform Differential Expression
##allows us to do create a DGE list object from edgeR
make_DGEList <- function(counts, Grouping){
  group <- as.factor(Grouping)
  counts <- counts
  # Create DGEList object
  cds <- DGEList(counts , group = group )
  # Normalize using the RLE method
  RLE_normalized_cds <- calcNormFactors(cds, method="RLE")
  list(cds=cds, normalized=RLE_normalized_cds)
}
#----------------



###############################################
##  KEGG PATHWAYS FOR FUNCTIONAL ANNOTATION ###
###############################################

# #get KEGG pathways
# #Uses the KEGGREST package
# library(KEGGREST)
# vars <- keggList("pathway","hsa")
# lis = list()
# varnames <- vector(length=length(vars))
# for(i in 1:length(vars)){ 
#   lis[[i]] <- vars[[i]]
#   varnames[i] <- names(vars)[i]
# }

# #data frame to hold KEGG name and its ID
# KEGGpathways <- data.frame(names = unlist(lis), id = varnames, stringsAsFactors = FALSE)
# KEGGpathways[,1] <- sapply(KEGGpathways[,1], function(x){gsub(" - Homo sapiens \\(human\\)", "", x)})
# KEGGpathways

# save(KEGGpathways, file = "~/Dropbox/Proteomics/Data/KEGGpathways")

# #Genes in KEGG pathways Uncomment below if necessary. Takes long to run when internet is slow
# pathGenes <- lapply(KEGGpathways[,2], function(x){getKeggGenes(x)})
# names(pathGenes) <- KEGGpathways[,2]
# pathGenes
# save(pathGenes, file = "~/Dropbox/Proteomics/Data/pathGenes")


